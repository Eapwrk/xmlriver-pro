#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XMLRiver Pro API

[‚Üê –ù–∞–∑–∞–¥ –∫ README](../README.md) ‚Ä¢ [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](README.md)
"""

import asyncio
import time
from typing import List, Dict, Any

from xmlriver_pro import AsyncGoogleClient, AsyncYandexClient
from xmlriver_pro.core import RateLimitError, NetworkError


async def basic_async_search_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    print("üöÄ –ë–∞–∑–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
    print("=" * 40)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
            results = await google.search("python programming")
            print(f"‚úÖ Google: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results.search_time:.2f} —Å–µ–∫")
            
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            news = await google.search_news("artificial intelligence")
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏: {news.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = await google.search_images("machine learning", num_results=5)
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {images.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except RateLimitError as e:
            print(f"‚ö†Ô∏è Rate limit: {e}")
        except NetworkError as e:
            print(f"‚ùå Network error: {e}")


async def concurrent_async_search_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    print("\nüîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
    print("=" * 40)
    
    queries = [
        "python programming",
        "machine learning",
        "data science",
        "web development",
        "artificial intelligence"
    ]
    
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = [google.search(query) for query in queries]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1} ({queries[i]}): {result}")
                else:
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} ({queries[i]}): {result.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def mixed_google_yandex_example():
    """–ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ Google –∏ Yandex"""
    
    print("\nüåê –°–º–µ—à–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Google + Yandex")
    print("=" * 40)
    
    query = "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ python"
    
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google, \
             AsyncYandexClient(user_id=123, api_key="your_yandex_key") as yandex:
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
        google_task = google.search(query)
        yandex_task = yandex.search(query)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            google_results, yandex_results = await asyncio.gather(
                google_task, yandex_task, return_exceptions=True
            )
            
            if isinstance(google_results, Exception):
                print(f"‚ùå Google: {google_results}")
            else:
                print(f"‚úÖ Google: {google_results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if isinstance(yandex_results, Exception):
                print(f"‚ùå Yandex: {yandex_results}")
            else:
                print(f"‚úÖ Yandex: {yandex_results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def adaptive_rate_limiting_async_example():
    """–ü—Ä–∏–º–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é"""
    
    print("\n‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é (async)")
    print("=" * 40)
    
    queries = ["python", "javascript", "java", "c++", "go", "rust"]
    delay = 1.0  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    max_delay = 10.0
    min_delay = 0.1
    
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        for i, query in enumerate(queries):
            try:
                print(f"–ó–∞–ø—Ä–æ—Å {i+1}/{len(queries)}: {query}")
                results = await google.search(query)
                print(f"  ‚úÖ –£—Å–ø–µ—Ö: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                delay = max(min_delay, delay * 0.9)
                
            except RateLimitError as e:
                print(f"  ‚ö†Ô∏è Rate limit: {e}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–∏–º–∏—Ç–∞
                delay = min(max_delay, delay * 1.5)
                print(f"  ‚è±Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {delay:.1f} —Å–µ–∫")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(queries) - 1:
                await asyncio.sleep(delay)
        
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f} —Å–µ–∫—É–Ω–¥")


async def batch_processing_async_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é"""
    
    print("\nüì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (async)")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        limits = await google.get_api_limits()
        daily_limit = limits['daily_limits']['google']
        max_concurrent = limits['max_concurrent_streams']
        
        print(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Google: {daily_limit:,} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {max_concurrent}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = [f"query_{i}" for i in range(20)]  # 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        batch_size = 5  # –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        batches = [queries[i:i + batch_size] for i in range(0, len(queries), batch_size)]
        
        print(f"–°–æ–∑–¥–∞–Ω–æ –±–∞—Ç—á–µ–π: {len(batches)}")
        print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        total_processed = 0
        
        for batch_num, batch in enumerate(batches):
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num + 1}/{len(batches)}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            semaphore = asyncio.Semaphore(max_concurrent)
            
            async def process_query_with_semaphore(query):
                async with semaphore:
                    try:
                        result = await google.search(query)
                        return {"query": query, "success": True, "results": result.total_results}
                    except Exception as e:
                        return {"query": query, "success": False, "error": str(e)}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [process_query_with_semaphore(query) for query in batch]
            batch_results = await asyncio.gather(*tasks)
            
            successful = [r for r in batch_results if r['success']]
            failed = [r for r in batch_results if not r['success']]
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
            print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
            
            total_processed += len(successful)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if batch_num < len(batches) - 1:
                print("  ‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                await asyncio.sleep(1)
        
        print(f"\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed} –∑–∞–ø—Ä–æ—Å–æ–≤")


async def advanced_async_example():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    
    print("\nüéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
    print("=" * 40)
    
    query = "artificial intelligence"
    
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
            tasks = {
                "web": google.search(query, num_results=5),
                "news": google.search_news(query, num_results=5),
                "images": google.search_images(query, num_results=5),
                "maps": google.search_maps(query, num_results=5),
                "ads": google.get_ads(query, num_results=5),
                "special": google.get_special_blocks(query)
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks.values(), return_exceptions=True)
            
            for task_name, result in zip(tasks.keys(), results):
                if isinstance(result, Exception):
                    print(f"‚ùå {task_name}: {result}")
                else:
                    print(f"‚úÖ {task_name}: {result.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def retry_configuration_example():
    """–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞")
    print("=" * 40)
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ retry
    async with AsyncGoogleClient(
        user_id=123, 
        api_key="your_google_key",
        timeout=120,        # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        max_retries=5,      # 5 –ø–æ–ø—ã—Ç–æ–∫
        retry_delay=2.0,    # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫
        enable_retry=True   # –≤–∫–ª—é—á–∏—Ç—å retry
    ) as google:
        try:
            results = await google.search("machine learning")
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ retry –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with AsyncGoogleClient(
        user_id=123, 
        api_key="your_google_key",
        enable_retry=False  # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
    ) as google:
        try:
            results = await google.search("deep learning")
            print(f"‚úÖ –ü–æ–∏—Å–∫ –±–µ–∑ retry: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ retry): {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XMLRiver Pro")
    print("=" * 60)
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    await basic_async_search_example()
    await concurrent_async_search_example()
    await mixed_google_yandex_example()
    await adaptive_rate_limiting_async_example()
    await batch_processing_async_example()
    await retry_configuration_example()
    await advanced_async_example()
    
    print(f"\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
