#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XMLRiver Pro API
"""

import time
import asyncio
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Any

from xmlriver_pro import GoogleClient, YandexClient
from xmlriver_pro.core import RateLimitError, NetworkError


def concurrent_search_example():
    """–ü—Ä–∏–º–µ—Ä –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    google = GoogleClient(user_id=123, api_key="your_google_key")
    yandex = YandexClient(user_id=123, api_key="your_yandex_key")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
    limits = google.get_api_limits()
    max_streams = limits['max_concurrent_streams']
    print(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {max_streams}")
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    queries = [
        "python programming",
        "machine learning",
        "data science",
        "web development",
        "artificial intelligence",
        "blockchain technology",
        "cloud computing",
        "mobile development",
        "cybersecurity",
        "devops"
    ]
    
    def search_google(query: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –≤ Google —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            results = google.search(query)
            return {
                "query": query,
                "system": "google",
                "total_results": results.total_results,
                "returned": len(results.results),
                "success": True
            }
        except RateLimitError as e:
            print(f"Rate limit error for '{query}': {e}")
            return {"query": query, "system": "google", "error": str(e), "success": False}
        except Exception as e:
            print(f"Error searching '{query}': {e}")
            return {"query": query, "system": "google", "error": str(e), "success": False}
    
    def search_yandex(query: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –≤ Yandex —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            results = yandex.search(query)
            return {
                "query": query,
                "system": "yandex", 
                "total_results": results.total_results,
                "returned": len(results.results),
                "success": True
            }
        except RateLimitError as e:
            print(f"Rate limit error for '{query}': {e}")
            return {"query": query, "system": "yandex", "error": str(e), "success": False}
        except Exception as e:
            print(f"Error searching '{query}': {e}")
            return {"query": query, "system": "yandex", "error": str(e), "success": False}
    
    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
    results = []
    
    with ThreadPoolExecutor(max_workers=max_streams) as executor:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ Google
        google_futures = {
            executor.submit(search_google, query): query 
            for query in queries
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ Yandex
        yandex_futures = {
            executor.submit(search_yandex, query): query 
            for query in queries
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google
        for future in as_completed(google_futures):
            result = future.result()
            results.append(result)
            print(f"Google: {result['query']} - {result.get('total_results', 'error')} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Yandex
        for future in as_completed(yandex_futures):
            result = future.result()
            results.append(result)
            print(f"Yandex: {result['query']} - {result.get('total_results', 'error')} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = [r for r in results if r.get('success', False)]
    failed = [r for r in results if not r.get('success', False)]
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful)}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed)}")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    return results


def adaptive_rate_limiting_example():
    """–ü—Ä–∏–º–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    google = GoogleClient(user_id=123, api_key="your_google_key")
    
    # –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    delay_between_requests = 1.0  # —Å–µ–∫—É–Ω–¥—ã
    max_delay = 10.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    min_delay = 0.1   # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    queries = ["python", "javascript", "java", "c++", "go", "rust"]
    
    for i, query in enumerate(queries):
        try:
            print(f"–ó–∞–ø—Ä–æ—Å {i+1}/{len(queries)}: {query}")
            results = google.search(query)
            print(f"  ‚úÖ –£—Å–ø–µ—Ö: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            delay_between_requests = max(min_delay, delay_between_requests * 0.9)
            
        except RateLimitError as e:
            print(f"  ‚ö†Ô∏è Rate limit: {e}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–∏–º–∏—Ç–∞
            delay_between_requests = min(max_delay, delay_between_requests * 1.5)
            print(f"  ‚è±Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {delay_between_requests:.1f} —Å–µ–∫")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(queries) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            time.sleep(delay_between_requests)
    
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay_between_requests:.1f} —Å–µ–∫—É–Ω–¥")


def batch_processing_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
    
    google = GoogleClient(user_id=123, api_key="your_google_key")
    limits = google.get_api_limits()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    daily_limit = limits['daily_limits']['google']
    print(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Google: {daily_limit:,} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–æ–ª—å—à–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)
    all_queries = [f"query_{i}" for i in range(300_000)]  # 300k –∑–∞–ø—Ä–æ—Å–æ–≤
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É
    batch_size = daily_limit // 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    batches = [all_queries[i:i + batch_size] for i in range(0, len(all_queries), batch_size)]
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –±–∞—Ç—á–µ–π: {len(batches)}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size:,} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    total_processed = 0
    
    for batch_num, batch in enumerate(batches[:3]):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±–∞—Ç—á–∞
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num + 1}/{len(batches)}")
        
        batch_results = []
        with ThreadPoolExecutor(max_workers=limits['max_concurrent_streams']) as executor:
            futures = {
                executor.submit(google.search, query): query 
                for query in batch[:10]  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            }
            
            for future in as_completed(futures):
                try:
                    result = future.result()
                    batch_results.append(result)
                    total_processed += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ: {e}")
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ: {len(batch_results)}")
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å)
        if batch_num < len(batches) - 1:
            print("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
            time.sleep(1)  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø–∞—É–∑–∞ –≤ —á–∞—Å


if __name__ == "__main__":
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XMLRiver Pro")
    print("=" * 60)
    
    start_time = time.time()
    
    print("\n1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
    concurrent_search_example()
    
    print("\n2Ô∏è‚É£ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é:")
    adaptive_rate_limiting_example()
    
    print("\n3Ô∏è‚É£ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ª–∏–º–∏—Ç–æ–≤:")
    batch_processing_example()
    
    print(f"\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
